ext {
    mindustryVersion = 'v150.1'
    jabelVersion = "93fde537c7"
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø—Ä–æ–µ–∫—Ç–æ–≤ (–ø–ª–∞–≥–∏–Ω–æ–≤)
subprojects {
    apply plugin: "java"
    
    repositories {
        mavenCentral()
        maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
        maven { url 'https://www.jitpack.io' }
    }
    
    java {
        targetCompatibility = 17
        sourceCompatibility = 17
    }
    
    dependencies {
        compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
        annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    }
    
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release', '8'])
    }
    
    jar {
        archiveFileName = "${project.name}.jar"
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        
        from {
            configurations.runtimeClasspath.collect { 
                it.isDirectory() ? it : zipTree(it) 
            }
        }
        
        from("src/main/resources") {
            include "plugin.hjson"
        }
    }
}

// CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤
task('new') {
    group = 'Plugin Development'
    description = 'Create new plugin: ./gradlew new -PnewPlugin=myPlugin'
    
    doLast {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º hasProperty –∏ getProperty –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å project.name
        def pluginName = null
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (project.hasProperty('newPlugin')) {
            pluginName = project.property('newPlugin')
        } else if (project.hasProperty('pluginName')) {
            pluginName = project.property('pluginName')
        } else if (project.hasProperty('pname')) {
            pluginName = project.property('pname')
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å
        if (!pluginName) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
            if (System.console() != null) {
                println "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞:"
                pluginName = System.console().readLine()
            }
            
            if (!pluginName || pluginName.trim().isEmpty()) {
                println "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:"
                println "   ./gradlew new -PnewPlugin=myPlugin"
                println "   ./gradlew new -PpluginName=myPlugin"
                println "   ./gradlew new -Ppname=myPlugin"
                println "   –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ ./gradlew new –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ"
                return
            }
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
        pluginName = pluginName.toString().trim()
        
        println "üîç –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –ø–ª–∞–≥–∏–Ω–∞: '$pluginName'"
        println "üîç –¢–∏–ø: ${pluginName.getClass()}"
        
        createNewPlugin(pluginName)
    }
}

def createNewPlugin(String pluginName) {
    println "üîç –ü–æ–ª—É—á–µ–Ω–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏: '$pluginName'"
    
    // –û—á–∏—â–∞–µ–º –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ - –æ—Å—Ç–∞–≤–ª—è–µ–º –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    def cleanName = pluginName.replaceAll(/[^a-zA-Z0-9]/, '')
    
    println "üîç –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: '$cleanName'"
    
    if (cleanName.isEmpty()) {
        println "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–ª–∞–≥–∏–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã."
        return
    }
    
    if (cleanName.length() < 3) {
        println "‚ùå –ò–º—è –ø–ª–∞–≥–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
        return
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
    def packageName = cleanName.toLowerCase()
    def className = cleanName.substring(0, 1).toUpperCase() + cleanName.substring(1).toLowerCase()
    
    println "üîç –ò–º—è –ø–∞–∫–µ—Ç–∞: '$packageName'"
    println "üîç –ò–º—è –∫–ª–∞—Å—Å–∞: '$className'"
    
    def pluginDir = file("src/$packageName")
    
    if (pluginDir.exists()) {
        println "‚ùå –ü–ª–∞–≥–∏–Ω '$packageName' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
        return
    }
    
    println "üî® –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≥–∏–Ω: $packageName"
    println "üì¶ –ö–ª–∞—Å—Å: ${className}Plugin"
    println "üìÅ –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è: $pluginName"
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    def javaDir = file("$pluginDir/src/main/java/$packageName")
    def resourcesDir = file("$pluginDir/src/main/java/$packageName")
    
    javaDir.mkdirs()
    resourcesDir.mkdirs()
    
    // –°–æ–∑–¥–∞–µ–º build.gradle –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞
    def buildGradleContent = """apply plugin: "java"

repositories{
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url 'https://www.jitpack.io' }
}

java{
    targetCompatibility = 17
    sourceCompatibility = 17
}

ext{
    mindustryVersion = 'v150.1'
    jabelVersion = "93fde537c7"
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:\$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:\$mindustryVersion"
    
    annotationProcessor "com.github.Anuken:jabel:\$jabelVersion"
}

tasks.withType(JavaCompile){
    options.compilerArgs.addAll(['--release', '8'])
}

jar{
    archiveFileName = "\${project.name}.jar"
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }
    
    from("src/main/java/${packageName}"){
        include "mod.hjson"
    }
}
"""
    file("$pluginDir/build.gradle").text = buildGradleContent
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–ª–∞–≥–∏–Ω–∞
    def javaClassContent = """package ${packageName};

import arc.util.CommandHandler;
import mindustry.mod.Plugin;

public class ${className}Plugin extends Plugin {
    
    @Override
    public void init() {
        // –ö—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–≥–∏–Ω–∞
        System.out.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        System.out.println("   [${packageName}] - –ù–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω!");
        System.out.println("   –í–µ—Ä—Å–∏—è: 1.0");
        System.out.println("   –ê–≤—Ç–æ—Ä: blysspeak");
        System.out.println("   –¢–∏–ø: –°–µ—Ä–≤–µ—Ä–Ω—ã–π –ø–ª–∞–≥–∏–Ω");
        System.out.println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    }
    
    @Override
    public void registerServerCommands(CommandHandler handler) {
        // –ü—É—Å—Ç–æ–π –º–µ—Ç–æ–¥ - —à–∞–±–ª–æ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ 
    }
    
    @Override
    public void registerClientCommands(CommandHandler handler) {
        // –ü—É—Å—Ç–æ–π –º–µ—Ç–æ–¥ - —à–∞–±–ª–æ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    }
}
"""
    file("$javaDir/${className}Plugin.java").text = javaClassContent
    
    // –°–æ–∑–¥–∞–µ–º plugin.hjson
    def hjsonContent = """{
    name: "${packageName}"
    displayName: "${pluginName}"
    author: "blysspeak"
    description: "–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ ${pluginName}"
    version: "1.0"
    minGameVersion: "151"
    main: "${packageName}.${className}Plugin"
    hidden: true
}
"""
    file("$resourcesDir/mod.hjson").text = hjsonContent
    
    // –°–æ–∑–¥–∞–µ–º README.md
    def readmeContent = """# ${pluginName} Plugin

–û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞.

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞
1. –°–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ –ø–ª–∞–≥–∏–Ω: ./gradlew :src:${packageName}:jar
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª build/libs/${packageName}.jar –≤ –ø–∞–ø–∫—É plugins/ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

## –ö–æ–º–∞–Ω–¥—ã
- ${packageName}-test - —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞

## –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å: ${packageName}.${className}Plugin
"""
    file("$pluginDir/README.md").text = readmeContent
    
    // –û–±–Ω–æ–≤–ª—è–µ–º settings.gradle
    updateSettingsGradle(packageName)
    
    println "‚úÖ –ü–ª–∞–≥–∏–Ω '$packageName' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
    println "üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: src/$packageName/"
    println "üî® –°–±–æ—Ä–∫–∞: ./gradlew :src:$packageName:jar"
    println "üìù –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ: src/$packageName/src/main/java/$packageName/${className}Plugin.java"
}

def updateSettingsGradle(String pluginName) {
    def settingsFile = file('settings.gradle')
    def content = ""
    
    if (settingsFile.exists()) {
        content = settingsFile.text.trim()
    }
    
    def newPlugin = ":src:$pluginName"
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–ª–∞–≥–∏–Ω
    if (content.contains("'$newPlugin'") || content.contains("\"$newPlugin\"")) {
        println "üìù –ü–ª–∞–≥–∏–Ω —É–∂–µ –µ—Å—Ç—å –≤ settings.gradle"
        return
    }
    
    if (content.isEmpty()) {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        content = "include ':src:$pluginName'"
    } else if (content.startsWith("include ")) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ include, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à –ø–ª–∞–≥–∏–Ω
        // –£–±–∏—Ä–∞–µ–º "include " –∏ –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã/–∫–∞–≤—ã—á–∫–∏, —Ä–∞–∑–±–∏—Ä–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
        def pluginsLine = content.substring(8).trim()
        
        if (pluginsLine.isEmpty()) {
            content = "include ':src:$pluginName'"
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–≥–∏–Ω –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
            content = "include $pluginsLine, ':src:$pluginName'"
        }
    } else {
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
        content = "include ':src:$pluginName'"
    }
    
    settingsFile.text = content
    println "üìù –û–±–Ω–æ–≤–ª–µ–Ω settings.gradle: –¥–æ–±–∞–≤–ª–µ–Ω ':src:$pluginName'"
}

task('list') {
    group = 'Plugin Development'
    description = 'List all plugins'
    
    doLast {
        def srcDir = file('src')
        if (!srcDir.exists()) {
            println "üìÅ –ü–∞–ø–∫–∞ src/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            return
        }
        
        def plugins = []
        srcDir.listFiles().each { dir ->
            if (dir.isDirectory() && file("$dir/build.gradle").exists()) {
                plugins.add(dir.name)
            }
        }
        
        if (plugins.isEmpty()) {
            println "üìÅ –ü–ª–∞–≥–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        } else {
            println "üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:"
            plugins.each { plugin ->
                println "  ‚Ä¢ $plugin"
            }
            println ""
            println "üî® –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö: ./gradlew jar"
            println "üî® –°–±–æ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ: ./gradlew :src:PLUGIN_NAME:jar"
        }
    }
}

// –ó–∞–¥–∞—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞
task('remove') {
    group = 'Plugin Development'
    description = 'Remove plugin: ./gradlew remove -PdelPlugin=myPlugin'
    
    doLast {
        def pluginName = null
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (project.hasProperty('delPlugin')) {
            pluginName = project.property('delPlugin')
        } else if (project.hasProperty('removePlugin')) {
            pluginName = project.property('removePlugin')
        } else if (project.hasProperty('del')) {
            pluginName = project.property('del')
        }
        
        if (!pluginName) {
            if (System.console() != null) {
                println "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
                pluginName = System.console().readLine()
            }
            
            if (!pluginName || pluginName.trim().isEmpty()) {
                println "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–ª–∞–≥–∏–Ω–∞:"
                println "   ./gradlew remove -PdelPlugin=myPlugin"
                println "   ./gradlew remove -PremovePlugin=myPlugin"
                println "   ./gradlew remove -Pdel=myPlugin"
                return
            }
        }
        
        pluginName = pluginName.toString().trim().toLowerCase()
        def pluginDir = file("src/$pluginName")
        
        if (!pluginDir.exists()) {
            println "‚ùå –ü–ª–∞–≥–∏–Ω '$pluginName' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            return
        }
        
        // –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–ª–∞–≥–∏–Ω–∞
        pluginDir.deleteDir()
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ settings.gradle
        def settingsFile = file('settings.gradle')
        if (settingsFile.exists()) {
            def content = settingsFile.text
            def newPlugin = ":src:$pluginName"
            
            // –£–¥–∞–ª—è–µ–º —Å –∑–∞–ø—è—Ç–æ–π –ø–µ—Ä–µ–¥ –∏–ª–∏ –ø–æ—Å–ª–µ
            content = content.replaceAll(", '$newPlugin'", "")
            content = content.replaceAll("'$newPlugin', ", "")
            content = content.replaceAll("'$newPlugin'", "")
            content = content.replaceAll(", \"$newPlugin\"", "")
            content = content.replaceAll("\"$newPlugin\", ", "")
            content = content.replaceAll("\"$newPlugin\"", "")
            
            // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ
            content = content.replaceAll(", ,", ",")
            content = content.replaceAll("include ,", "include ")
            
            settingsFile.text = content
        }
        
        println "‚úÖ –ü–ª–∞–≥–∏–Ω '$pluginName' —É–¥–∞–ª–µ–Ω!"
    }
}